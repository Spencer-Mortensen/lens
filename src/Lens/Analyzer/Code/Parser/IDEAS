<?php

const CONNECT_OK = 1;
define('a', 'A');

abstract class C implements
{

}

trait T
{
}

interface I
{
}

function f(...)
{
}

/*
if ($a) {
	exit();
}
*/

use My\Full\Classname;
use My\Full\Classname as Another;
use My\Full\Classname as Another, My\Full\Classname;

use some\namespace\ClassA;
use some\namespace\ClassB;
use some\namespace\ClassC as C;

use some\namespace\{ClassA, ClassB, ClassC as C};

use function My\Full\function;
use function My\Full\function as another;

use function some\namespace\fn_a;
use function some\namespace\fn_b;
use function some\namespace\fn_c;

use function some\namespace\{fn_a, fn_b, fn_c};

use const My\Full\CONSTANT;

use const some\namespace\ConstA;
use const some\namespace\ConstB;
use const some\namespace\ConstC;

use const some\namespace\{ConstA, ConstB, ConstC};

======

<?php

declare(encoding='UTF-8');

namespace MyProject {
	const CONNECT_OK = 1;
	class Connection { /* ... */ }
	function connect() { /* ... */  }
}

namespace { // global code
	session_start();
	$a = MyProject\connect();
	echo MyProject\Connection::start();
}
