#!/usr/bin/env php
<?php

$projectDirectory = dirname(__DIR__);
$buildDirectory = dirname(__DIR__);
$alias = 'testphp';
$pharFile = "{$buildDirectory}/{$alias}.phar";

$pharBuilder = new PharBuilder($pharFile, $alias);
$pharBuilder->addPhpFiles("{$projectDirectory}/src");
$pharBuilder->addResourceFiles("{$projectDirectory}/files/style");

class PharBuilder
{
    /** @var string */
    private $pharFile;

	/** @var Phar */
	private $phar;

	public function __construct($pharFile, $alias)
	{
		$this->pharFile = $pharFile;

		@unlink($this->pharFile);

		$this->phar = new Phar($pharFile, 0, $alias);
		$this->phar->startBuffering();
		$this->addStub($alias);
	}

	public function __destruct()
	{
		$this->phar->stopBuffering();
	}

	public function addStub($alias)
	{
		$stub = <<<EOS
#!/usr/bin/env php
<?php
Phar::mapPhar('{$alias}'); require 'phar://{$alias}/bootstrap.php'; new \TestPhp\Command(); __HALT_COMPILER();
EOS;
		$this->phar->setStub($stub);

		$bootstrapPath = 'bootstrap.php';
		$bootstrapContents = <<<EOS
<?php
spl_autoload_register(
	function (\$class)
	{
		\$namespace = 'TestPhp';
		\$libraryDirectory = 'phar://{$alias}/src';

		\$namespacePrefix = \$namespace . '\\\\';
		\$namespacePrefixLength = strlen(\$namespacePrefix);

		if (strncmp(\$class, \$namespacePrefix, \$namespacePrefixLength) !== 0) {
			return;
		}

		\$relativeClassName = substr(\$class, \$namespacePrefixLength);
		\$relativeFilePath = strtr(\$relativeClassName, '\\\\', '/') . '.php';
		\$absoluteFilePath = "{\$libraryDirectory}/{\$relativeFilePath}";

		if (is_file(\$absoluteFilePath)) {
			include \$absoluteFilePath;
		}
	}
);
EOS;

		$this->addPhpString($bootstrapPath, $bootstrapContents);
	}

	public function addPhpFiles($directoryPath)
	{
		$directoryPathLength = strlen($directoryPath);
		$files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directoryPath));

		foreach ($files as $file) {
			if ($file->isDir()) {
				continue;
			}

			if (substr($file, -4) !== '.php') {
				continue;
			}

			$absoluteFilePath = $file->getPathname();
			$relativeFilePath = substr($absoluteFilePath, $directoryPathLength + 1);

			// TODO: the "src" path is hard-coded here:
			$pharPath = "src/{$relativeFilePath}";
			$pharContents = php_strip_whitespace($absoluteFilePath);

			$this->phar->addFromString($pharPath, $pharContents);
		}
	}

	// TODO: abstract away this near-identical logic:
	public function addResourceFiles($directoryPath)
	{
		$directoryPathLength = strlen($directoryPath);
		$files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directoryPath));

		foreach ($files as $file) {
			if ($file->isDir()) {
				continue;
			}

			$absoluteFilePath = $file->getPathname();
			$relativeFilePath = substr($absoluteFilePath, $directoryPathLength + 1);

			// TODO: the style path is hard-coded here:
			$pharPath = "files/style/{$relativeFilePath}";
			$pharContents = file_get_contents($absoluteFilePath);

			$this->phar->addFromString($pharPath, $pharContents);
		}
	}

	public function addPhpString($pharPath, $rawContents)
	{
		$rawPath = '/tmp/php_phar';

		file_put_contents($rawPath, $rawContents);
		$pharContents = php_strip_whitespace($rawPath);
		unlink($rawPath);

		$this->phar->addFromString($pharPath, $pharContents);
	}
}
